<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[C#] 綠界站內付2.0 - 參數加密與解密</title>
    <url>/2021/08/20/csharp-ecpay-embedded-checkout-encrypt-and-decode/</url>
    <content><![CDATA[<p>一般串接金流時，如果要傳遞資料都需要將資料進行加解密，而最近因案子需求有接觸到綠界站內付 2.0，所以在此紀錄如何用 C# 編寫綠界站內付 2.0 加解密的程式。</p>
<span id="more"></span>

<h2 id="綠界站內付-2-0"><a href="#綠界站內付-2-0" class="headerlink" title="綠界站內付 2.0"></a>綠界站內付 2.0</h2><p>「站內付 2.0」是綠界在今年（2021）年初推出的全新廠商付款串接規格，付款頁面改用嵌入式以減少跳轉畫面（如下圖），提供流暢的交易體驗，詳情可看綠界的<a href="https://www.ecpay.com.tw/Activities/inpay2">官網服務介紹</a>。</p>
<img src="/2021/08/20/csharp-ecpay-embedded-checkout-encrypt-and-decode/Schematic.png" class="" title="站內付2.0 示意圖">

<h3 id="資料如何加解密？"><a href="#資料如何加解密？" class="headerlink" title="資料如何加解密？"></a>資料如何加解密？</h3><p>站內付 2.0 的介接方式可以去官網的「<a href="https://www.ecpay.com.tw/Service/API_Dwnld">串接規格下載</a>」，下載相關的技術文件。根據文件上的說明（如下圖）可知道須透過 JSON 格式編碼、URL 編碼及 AES 加密演算法，這 3 個階段來進行參數加解密。</p>
<img src="/2021/08/20/csharp-ecpay-embedded-checkout-encrypt-and-decode/Encryption.png" class="" title="站內付2.0 參數加密方式">

<p>以下將先個別介紹 3 個階段該如何處理，而於最後整合在一起。</p>
<h2 id="AES-加密演算法"><a href="#AES-加密演算法" class="headerlink" title="AES 加密演算法"></a>AES 加密演算法</h2><p>AES（Advanced Encryption Standard）又稱 Rijndael 加密法，是對稱金鑰加密中流行的演算法之一。</p>
<h3 id="AesCryptoServiceProvider"><a href="#AesCryptoServiceProvider" class="headerlink" title="AesCryptoServiceProvider"></a>AesCryptoServiceProvider</h3><p>針對 AES 加密演算法可透過 AesCryptoServiceProvider 類別來處理，這是微軟提供有關於 AES 的實作類別，用於執行對稱加密和解密。</p>
<ul>
<li><strong>命名空間</strong>: <code>System.Security.Cryptography</code></li>
<li><a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.security.cryptography.aescryptoserviceprovider" title="AesCryptoServiceProvider 類別 (System.Security.Cryptography) | Microsoft Docs">官方文件</a></li>
</ul>
<h3 id="加解密程式範例"><a href="#加解密程式範例" class="headerlink" title="加解密程式範例"></a>加解密程式範例</h3><p>跟據綠界所需的 AES 設定，建立一個用於處理 AES 加解密的類別，程式碼如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AESEncryption</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 加密</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;text&quot;&gt;</span>資料字串<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iv&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>加密字串<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Encrypt</span>(<span class="params"><span class="built_in">string</span> text, <span class="built_in">string</span> key, <span class="built_in">string</span> iv</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> encrypt = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">using</span> (AesCryptoServiceProvider csp = <span class="keyword">new</span> AesCryptoServiceProvider())</span><br><span class="line">        &#123;</span><br><span class="line">            csp.KeySize = <span class="number">128</span>;</span><br><span class="line">            csp.IV = Encoding.UTF8.GetBytes(iv);</span><br><span class="line">            csp.Key = Encoding.UTF8.GetBytes(key);</span><br><span class="line">            csp.Mode = CipherMode.CBC;</span><br><span class="line">            csp.Padding = PaddingMode.PKCS7;</span><br><span class="line">            <span class="built_in">byte</span>[] data = Encoding.UTF8.GetBytes(text);</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (CryptoStream cs = <span class="keyword">new</span> CryptoStream(ms, csp.CreateEncryptor(), CryptoStreamMode.Write))</span><br><span class="line">                &#123;</span><br><span class="line">                    cs.Write(data, <span class="number">0</span>, data.Length);</span><br><span class="line">                    cs.FlushFinalBlock();</span><br><span class="line">                    encrypt = Convert.ToBase64String(ms.ToArray());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> encrypt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 解密</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;encryptedText&quot;&gt;</span>加密字串<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iv&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>解密後的資料字串<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Decrypt</span>(<span class="params"><span class="built_in">string</span> encryptedText, <span class="built_in">string</span> key, <span class="built_in">string</span> iv</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> plaintext = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">using</span> (AesCryptoServiceProvider csp = <span class="keyword">new</span> AesCryptoServiceProvider())</span><br><span class="line">        &#123;</span><br><span class="line">            csp.KeySize = <span class="number">128</span>;</span><br><span class="line">            csp.IV = Encoding.UTF8.GetBytes(iv);</span><br><span class="line">            csp.Key = Encoding.UTF8.GetBytes(key);</span><br><span class="line">            csp.Mode = CipherMode.CBC;</span><br><span class="line">            csp.Padding = PaddingMode.PKCS7;</span><br><span class="line">            <span class="built_in">byte</span>[] cipherText = Convert.FromBase64String(encryptedText);</span><br><span class="line">            ICryptoTransform decryptor = csp.CreateDecryptor();</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream(cipherText))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (CryptoStream cs = <span class="keyword">new</span> CryptoStream(ms, decryptor, CryptoStreamMode.Read))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">using</span> (StreamReader reader = <span class="keyword">new</span> StreamReader(cs))</span><br><span class="line">                    &#123;</span><br><span class="line">                        plaintext = reader.ReadToEnd();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> plaintext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul>
<li><a href="https://levelup.gitconnected.com/implementing-aes-encryption-in-node-js-and-c-from-scratch-6ee7b47ae6d4">Implementing AES Encryption in Node.js and C# from Scratch | Medium</a></li>
</ul>
<h2 id="URL-編碼"><a href="#URL-編碼" class="headerlink" title="URL 編碼"></a>URL 編碼</h2><p>這應該不用作者我多做介紹吧，常用於 URL 上的字元編碼，網路上有更多其他詳細說明的資源的。</p>
<h3 id="HttpUtility"><a href="#HttpUtility" class="headerlink" title="HttpUtility"></a>HttpUtility</h3><p>針對 URL 編碼可透過 HttpUtility 類別來處理，這是微軟提供處理關於 Web 請求時所需的編碼和解碼方法。</p>
<ul>
<li><strong>命名空間</strong>: <code>System.Web</code></li>
<li><a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.web.httputility" title="HttpUtility 類別 (System.Web) | Microsoft Docs">官方文件</a></li>
</ul>
<p>使用其中的 <code>UrlEncode</code> 與 <code>UrlDecode</code> 方法來處理。</p>
<h4 id="UrlEncode-編碼"><a href="#UrlEncode-編碼" class="headerlink" title="UrlEncode - 編碼"></a>UrlEncode - 編碼</h4><ul>
<li><a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.web.httputility.urlencode" title="HttpUtility.UrlEncode 方法 (System.Web) | Microsoft Docs">官方文件</a></li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span>? UrlEncode (<span class="built_in">string</span>? str);</span><br></pre></td></tr></table></figure>

<h4 id="UrlDecode-解碼"><a href="#UrlDecode-解碼" class="headerlink" title="UrlDecode - 解碼"></a>UrlDecode - 解碼</h4><ul>
<li><a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.web.httputility.urldecode" title="HttpUtility.UrlDecode 方法 (System.Web) | Microsoft Docs">官方文件</a></li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span>? UrlDecode (<span class="built_in">string</span>? str);</span><br></pre></td></tr></table></figure>

<h2 id="JSON-格式編碼"><a href="#JSON-格式編碼" class="headerlink" title="JSON 格式編碼"></a>JSON 格式編碼</h2><p>這應該不用作者我多做介紹吧，常用於 JavaScript 上傳輸資料的呈現格式，網路上有更多其他詳細說明的資源的。</p>
<h3 id="JsonConvert"><a href="#JsonConvert" class="headerlink" title="JsonConvert"></a>JsonConvert</h3><p>針對 JSON 可透過 Json.NET 類別庫提供的 JsonConvert 類別來處理。首先，須透過 NuGet 先下載 Newtonsoft.Json。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Install-Package Newtonsoft.Json</span><br></pre></td></tr></table></figure>

<h4 id="SerializeObject-序列化"><a href="#SerializeObject-序列化" class="headerlink" title="SerializeObject - 序列化"></a>SerializeObject - 序列化</h4><ul>
<li><a href="https://www.newtonsoft.com/json/help/html/M_Newtonsoft_Json_JsonConvert_SerializeObject.htm" title="JsonConvert.SerializeObject Method | Json.NET Documentation">官方文件</a></li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">SerializeObject</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    Object <span class="keyword">value</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>)</span></span><br></pre></td></tr></table></figure>

<h4 id="DeserializeObject-反序列"><a href="#DeserializeObject-反序列" class="headerlink" title="DeserializeObject - 反序列"></a>DeserializeObject - 反序列</h4><ul>
<li><a href="https://www.newtonsoft.com/json/help/html/M_Newtonsoft_Json_JsonConvert_DeserializeObject.htm" title="JsonConvert.DeserializeObject Method | Json.NET Documentation">官方文件</a></li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">DeserializeObject</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">string</span> <span class="keyword">value</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>)</span></span><br></pre></td></tr></table></figure>

<h2 id="完整程式範例"><a href="#完整程式範例" class="headerlink" title="完整程式範例"></a>完整程式範例</h2><p>最後依據綠界站內付 2.0 所需的加解密流程，將各步驟的程式碼組合在一起，其中 AES 加解密使用前面撰寫的類別來處理，程式碼如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ECPayService</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">EncryptData</span>(<span class="params"><span class="built_in">object</span> data, <span class="built_in">string</span> HashKey, <span class="built_in">string</span> HashIV</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">var</span> text = HttpUtility.UrlEncode(JsonConvert.SerializeObject(data));</span><br><span class="line">      <span class="keyword">return</span> AESEncryption.Encrypt(text, HashKey, HashIV);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> TResult <span class="title">DecryptData</span>&lt;<span class="title">TResult</span>&gt;(<span class="params"><span class="built_in">string</span> encryptedText, <span class="built_in">string</span> HashKey, <span class="built_in">string</span> HashIV</span>) <span class="keyword">where</span> TResult : <span class="keyword">class</span></span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">string</span> plaintext = AESEncryption.Decrypt(encryptedText, HashKey, HashIV);</span><br><span class="line">      <span class="built_in">string</span> jsonStr = HttpUtility.UrlDecode(plaintext);</span><br><span class="line">      <span class="keyword">return</span> JsonConvert.DeserializeObject&lt;TResult&gt;(jsonStr, <span class="keyword">new</span> JsonSerializerSettings &#123; MetadataPropertyHandling = MetadataPropertyHandling.Ignore &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>ECPay</tag>
        <tag>AES 加密</tag>
        <tag>URL encoding</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>[JavaScript] 使用 Fetch API 來下載檔案（Download File）</title>
    <url>/2021/08/12/js-file-download-using-fetch/</url>
    <content><![CDATA[<img src="/2021/08/12/js-file-download-using-fetch/banner.jpg" class="" title="Banner">

<p>一般來說檔案要讓使用者下載很簡單，只需要在畫面上放一個超連結導向到檔案的路徑，當使用者點擊即開始下載。<br>然而並不是每次都那麼簡單，也是有可能會有需要藉由 API 的方式來產生並下載檔案的情況，此時只好自己寫 JavaScript 去呼叫 API 並下載檔案。</p>
<span id="more"></span>

<h2 id="範例程式碼"><a href="#範例程式碼" class="headerlink" title="範例程式碼"></a>範例程式碼</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Download file</span></span><br><span class="line">fetch(<span class="string">&#x27;Your api or file url&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="comment">// 其他設定或是需要傳遞的資料</span></span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> response.blob())</span><br><span class="line">  .then(<span class="function"><span class="params">blob</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="built_in">window</span>.URL.createObjectURL(blob); <span class="comment">// create url from blob</span></span><br><span class="line">    <span class="keyword">var</span> fileLink = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// create link for file</span></span><br><span class="line">    fileLink.href = url;</span><br><span class="line">    fileLink.download = <span class="string">&#x27;output.csv&#x27;</span>; <span class="comment">// download filename</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(fileLink); <span class="comment">// append file link to download</span></span><br><span class="line">    fileLink.click();</span><br><span class="line">    fileLink.remove(); <span class="comment">// remove file link after click</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Handle error here.</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>其主要概念就是取得檔案 Blob 並轉換成 URL，最後藉由 HTML 的超連結標籤（&lt;a&gt;）來模擬下載檔案。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://medium.com/@NorthBei/js%E7%AD%86%E8%A8%98-js-download-file-programmatically-padding-zero-4bf23a7e5cff">[JS 筆記]Js download file programmatically &amp; padding zero | Medium</a></li>
<li><a href="https://scarletsky.github.io/2016/07/03/download-file-using-javascript/">如何用 JavaScript 下载文件 - scarletsky</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Fetch API</tag>
      </tags>
  </entry>
  <entry>
    <title>[JavaScript] 藉由 Fetch API 與 Form Data 來上傳檔案（Uploading files）</title>
    <url>/2021/08/08/js-file-upload-using-fetch/</url>
    <content><![CDATA[<img src="/2021/08/08/js-file-upload-using-fetch/banner.jpg" class="" title="Banner">

<p>上傳檔案是 Web 常用的應用之一，能使用的方式有相當多中，其中最常基本的方式就是將 HTML form 標籤上的編碼類型(enctype)設為 multipart/form-data，讓瀏覽器能針對檔案進行編碼。</p>
<span id="more"></span>

<p>這邊紀錄如何使用 JavaScript 的 Fetch API 來上傳檔案，使用 API 上傳檔案需透過建立一個 FormData 物件來當作請求內容。</p>
<h2 id="範例程式碼"><a href="#範例程式碼" class="headerlink" title="範例程式碼"></a>範例程式碼</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Upload file</span></span><br><span class="line"><span class="comment">// 先取得使用者上傳的檔案</span></span><br><span class="line"><span class="comment">// ex. var selectedFile = document.getElementById(&#x27;file&#x27;).files[0];</span></span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">formData.append(<span class="string">&#x27;file&#x27;</span>, file); <span class="comment">// 設定上傳的檔案</span></span><br><span class="line">formData.append(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;aa01&#x27;</span>); <span class="comment">// 可以一起設定其他需要傳送的資料</span></span><br><span class="line"></span><br><span class="line">fetch(<span class="string">&#x27;你的 API 網址&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: formData,</span><br><span class="line">  <span class="comment">// Other setting you need</span></span><br><span class="line">  <span class="comment">// 不需要設定 &#x27;Content-Type&#x27;: &#x27;multipart/form-data&#x27; ，已經用 FormData 物件作為請求內容了</span></span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">json</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Handle get result here.</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Handle error here.</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>在 Chrome 的開發人員工具裡，查看此檔案上傳的內容，其顯示內容如下圖：</p>
<img src="/2021/08/08/js-file-upload-using-fetch/chrome-upload-file.png" class="" title="Chrome 預覽">
<p>可以發現資料採用 Form Data 格式，而檔案轉 Binary 傳送給 API 了。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://muffinman.io/uploading-files-using-fetch-multipart-form-data">Uploading files using ‘fetch’ and ‘FormData’ · Muffin Man</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Fetch API</tag>
      </tags>
  </entry>
</search>
